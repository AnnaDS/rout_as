}
else{vmfdS=cbind(vmfdS, vmfd[,which(colnames(vmfd) %in% colnames(vmfd)[grep(assess[i], colnames(vmfd))])])}}
par(mfrow=c(2,2))
k=1
vmfdSs= sapply(vmfdS, median)
for(i in 1:length(assess)){
boxplot(vmfdS[,seq(k,(k+2))], col=c('red', 'blue', 'green'), main = paste(company,assessN[i]))
#  barplot(vmfdSs[seq(k,(k+2))], col=c('red', 'blue', 'green'), main = paste(company,assessN[i]))
k=k+3
}
}
FR=getALLResF(initialV, stageV,  cmp='фес', initD, stageD, init_env, stage_env)
FR=getALLResF(initialV, stageV,  cmp='atc', initD, stageD, init_env, stage_env)
head(FR)
plot(FR$FRRR)
t=getDBF('2.1.1.0', cmp="atc", dates=stageD, stage_env, init=FALSE, rp='4 Region SP')
head(t)
1081+251
1706-1332
install.packages("dplyr")
eus <- get.hist.quote(instrument = "EUR/USD",  provider
= "oanda", start = "2014-01-01", end="2014-11-18")
library("tseries", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
eus <- get.hist.quote(instrument = "EUR/USD",  provider
= "oanda", start = "2014-01-01", end="2014-11-18")
eus <- get.hist.quote(instrument = "EUR/USD",  provider
= "oanda", start = "2014-01-01", end="2014-11-18")
plot(eus)
adf<-function(x, L = 2, int = T, trend = T){
#Construct Data for Augmented Dickey Fuller Model with L lags.
#This is a modified version for R, in which the command rts was substituted by ts.
x <- ts(x)#convert the data x into time series
D <- diff(x) #compute the first difference of data x
if(L > 0) {
for(i in 1:L)
D <- ts.intersect(D, lag(diff(x),  - i))
}
D <- ts.intersect(lag(x, -1), D)#binds series exclude NAs
if(trend == T)
D <- ts.intersect(D, time(x))
y <- D[, 2]
x <- D[, -2]
if(int == T)
o2=summary(lm(y ~ x))
else o2=summary(lm(y ~ x - 1))
#if no intercept wanted then force regr thru origin using the -1
list(o1=cbind(y,x), o2=o2)#there are two outputs
}
Stat.test <- function(y){
add <- vector()
for(i in 30:length(y)) add[i-29]=adf.test((y)[1:i])$p.value #/(0.05/length(y[1:i]))
#for(i in 30:length(y)) add[i-29]=adfTest((y)[1:i], type='nc')@test$p.value #/(0.05/length(y[1:i]))
return(add)
}
xxt=coredata(xt)
for(i in 1:length(xxt)){
aax=auto.arima(xxt, test='adf')
faax=forecast(aax, h=7)
if(abs( mean(diff(faax$mean)))<0.00009)
# if(sqrt(sum(diff(diff((xt)))^2))<sqrt(sum(aax$residuals^2)))
print(paste(i, abs( mean(diff(faax$mean)))))
}
for(i in 50:length(xxt)){
xr=xxt[(length(xxt)-i):length(xxt)]
if( length(which(Stat.test(diff((xr)))>0.01))>0) print(i)
}
stationary <- function(y){
if(adfTest(y, type='nc')@test$p.value<0.05) return ('Random walk')
else if(adfTest(y, type='c')@test$p.value<0.05) return ('Random walk 2')
else if(adfTest(y, type='ct')@test$p.value<0.02) return ('TS stationary')
else {
yd=diff(y)
styd=Stat.test(yd)
if(length(which(styd > 0.03))<7) {
plot(yd, t='l')
return ('DS stationary')
}
else {
wyd=which(Stat.test(yd)>0.02)
if(length(wyd)>3){
wyd2=which(Stat.test(yd[max(wyd):length(yd)])>0.02)
if(length(wyd2)>3 && length(which((wyd==wyd2)==FALSE))>0){
ydd=diff(yd)
wydd=which(Stat.test(ydd)>0.01)
if (length(wydd)>0) return ('Nonstationary')
else {
wt=NULL
for(j in 1:10){
z=round(runif(1,length(ydd)/10,(length(ydd)-2*length(ydd)/10)))
wt[j]=wilcox.test(ydd[1:z], ydd[(z+1):length(ydd)])$p.value
}
if (mean(wt)>0.5) return ('Nonstationary heterogeneous')
}
}
else return ('DS stationary2')
}
}
}
}
hurst <- function(y, fff, adf = FALSE, shift=0, N=0){
H=NULL
if(N==0) N=length(y)
for(i in 30:(length(y)-1)) H[i-29]=hurstSpec(diff(y)[1:i])
if(adf) fff=c(rep(1, round(log(length(H)))))/(round(log(length(H))))
#fff=c(rep(1, length(H)/20))/(length(H)/20)
H1=filter(H,filter=fff)
if(which(H1>0.5)[1]<which(H1<0.5)[1]) {r=which(H1<0.5)[1]}
else {r=which(H1>0.5)[1]}
plot(y=H1, x=seq((30+shift),(length(y)-1+shift)), xlim=c(0, (N-1)), t='l', lwd=2, xlab='')
lines(x=c(0,(length(y)-1+shift)),y=c(0.5,0.5), lty=2)
lines(x=c((r+30-1+shift),(r+30-1+shift)),y=c(-0.2,0.5), lty=2)
return(r+30-1)
}
stationary(coredata(eus))
install.packages("fUnitRoots")
install.packages("fUnitRoots")
eus <- get.hist.quote(instrument = "EUR/USD",  provider
= "oanda", start = "2012-09-01", end="2013-12-22")
plot(eus)
library("forecast", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
auto.arima(coredata(eus))
aeus=auto.arima(coredata(eus))
f=forecast(aeus, h=7)
plot(f)
f=forecast(aeus, h=14)
plot(f)
getwd()
shiny::runApp('Documents/routing/rout_as', launch.browser=TRUE)
getwd()
shiny::runApp('Documents/routing/rout_as')
installed.packages(.Library)
shiny::runApp('Documents/routing/rout_as')
shiny::runApp('Documents/routing/rout_as')
shiny::runApp('Documents/routing/rout_as')
shiny::runApp('Documents/routing/rout_as')
shiny::runApp('Documents/routing/rout_as')
shiny::runApp('Documents/routing/rout_as')
avM=c(0.384, 0.288214286, 0.29, 0.364285714, 0.209444444, 0.225)
hist(avM)
avM
avM=c(0.384, 0.288214286, 0.29, 0.364285714, 0.209444444)
hist(avM)
cua=c(0.0031, 0.0112, 0.0145,0.01, 0.0063)
plot(cua ~avM)
plot(cua ~avM, col='red', lwd=4)
cua=c(0.0031, 0.0112, 0.0145,0.01)
avM=c(0.384, 0.288214286, 0.29, 0.364285714)
plot(cua ~avM, col='red', lwd=4)
plot(avM~cua, col='red', lwd=4)
shiny::runApp('Documents/routing/rout_as')
shiny::runApp('Documents/routing/rout_as')
shiny::runApp('Documents/routing/rout_as')
shiny::runApp('Documents/routing/rout_as')
setwd("/Users/annachistyakova/Documents/Capacity")
D1=read.csv("alltop.csv", header=F, sep='\t')
head(D1)
dim(D1)
D1=read.csv("alltop.csv", header=F, sep='\t')
head(D1)
D1=read.csv("alltop.csv", header=F, sep=',')
head(D1)
D11=(D1[which(D1[,9]=="idle"),11])
head(D11)
D11=(D1[which(D1[,9]=="RUN"),11])
head(D11)
plot(D11, t='l')
D12=(D1[which(D1[,CPU0]=="RUN"),11])
D12=(D1[which(D1[,9]=="CPU0"),11])
plot(D12, t='l')
plot(D1[,11], t='l')
plot(D1[,12], t='l')
plot(as.numeric(D1[,12]), t='l')
D2=read.csv("cpu_utilisation.2.csv", header=F, sep='\t')
head(D@)
head(D2)
nrow(D1)
plot(as.numeric(D11[,12]), t='l')
plot(as.numeric(D12[,12]), t='l')
head(D1)
D1$V12=gsub("%","", D1$V12)
plot(D1$V12, t='l')
plot(400-D1$V12, t='l')
plot(400-as.numeric(D1$V12), t='l')
find.levels <- function(y, min.length=30){
R=list()
dl=NULL
hl=NULL
ml=NULL
ll=NULL
for(i in min.length:length(y)){
x=y[1:i]
km=kmeans(x, 4, iter.max = 100)
cc=sort(km$center)
if(is.null(dl)){
dl[1:i]=rep((mean(x[which(km$cluster==which(km$center==cc[4]))])+sd(D[which(km$cluster==which(km$center==cc[4]))])),i)
hl[1:i]=rep((mean(x[which(km$cluster==which(km$center==cc[3]))])+sd(D[which(km$cluster==which(km$center==cc[3]))])),i)
# ml[1:i]=rep((mean(x[which(km$cluster==which(km$center==cc[2]))])+sd(D[which(km$cluster==which(km$center==cc[2]))])),i)
ml[1:i]=rep((mean(x[which(km$cluster==which(km$center==cc[2]))])),i)
ll[1:i]=rep((mean(x[which(km$cluster==which(km$center==cc[1]))])-sd(D[which(km$cluster==which(km$center==cc[1]))])),i)
}
else{
dl[i]=(mean(x[which(km$cluster==which(km$center==cc[4]))])+sd(D[which(km$cluster==which(km$center==cc[4]))]))
hl[i]=(mean(x[which(km$cluster==which(km$center==cc[3]))])+sd(D[which(km$cluster==which(km$center==cc[3]))]))
# ml[i]=(mean(x[which(km$cluster==which(km$center==cc[2]))])+sd(D[which(km$cluster==which(km$center==cc[2]))]))
ml[i]=(mean(x[which(km$cluster==which(km$center==cc[2]))]))
ll[i]=(mean(x[which(km$cluster==which(km$center==cc[1]))])-sd(D[which(km$cluster==which(km$center==cc[1]))]))
}
}
R$dl=dl
R$hl=hl
R$ml=ml
R$ll=ll
return(R)
}
draw.func <- function(x){
#par(mfrow=c(1,1))
kmw=kmeans(x,4, iter.max=100)
plot(x, t='l')
kmws=sort(kmw$centers)
lines(rep(( mean(x[which(kmw$cluster==3)])), length(x)), type="l", lty=3,col='yellow',lwd=2)
lines(rep(( mean(x[which(kmw$cluster==1)])), length(x)), type="l", lty=3,col='yellow',lwd=2)
lines(rep(( mean(x[which(kmw$cluster==2)])), length(x)), type="l", lty=3,col='yellow',lwd=2)
lines(rep(( mean(x[which(kmw$cluster==4)])), length(x)), type="l", lty=3,col='yellow',lwd=2)
lines(rep(( min(x[which(kmw$cluster==which(kmw$centers==kmws[2]))])), length(x)), col='green', lwd=4)
lines(rep(( max(x[which(kmw$cluster==which(kmw$centers==kmws[2]))])), length(x)), col='green', lwd=4)
lines(rep(( max(x[which(kmw$cluster==which(kmw$centers==kmws[3]))])), length(x)), col='blue', lwd=4)
lines(rep(( mean(x[which(kmw$cluster==which(kmw$centers==kmws[4]))])+sd(x[which(kmw$cluster==which(kmw$centers==kmws[4]))])),
length(x)), col='red', lwd=4)
lines(rep(( mean(x[which(kmw$cluster==which(kmw$centers==kmws[4]))])+3*sd(x[which(kmw$cluster==which(kmw$centers==kmws[4]))])),
length(x)), col='red', lwd=4)
hl=( mean(x[which(kmw$cluster==which(kmw$centers==kmws[4]))])+sd(x[which(kmw$cluster==which(kmw$centers==kmws[4]))]))
ll=mean(x[which(kmw$cluster==which(kmw$centers==kmws[2]))])
#It necessary to devide into 2 clusters from H1 to H3
x1=x[which(x>mean(x[which(kmw$cluster==which(kmw$centers==kmws[2]))]) & x<mean(x[which(kmw$cluster==which(kmw$centers==kmws[4]))]))]
kmw1=kmeans(x1,2, iter.max=100)
av=mean(x[which(x>=ll & x<hl)])
av1=median(x[which(x>=ll & x<hl)])
print(max(x1[which(kmw1$cluster==1)]))
lines(rep(av, length(x)), type="l", lty=3,col='dark violet',lwd=6)
#lines(rep(av1, length(x)), type="l", lty=3,col='violet',lwd=6)
print(kurtosis(x1))
print(skewness(x1))
if(kurtosis(x1)>(-0.5) & skewness(x1)<0){print('V1')
lines(rep(max(x1[which(kmw1$cluster==which(kmw1$centers==min(kmw1$centers)))]), length(x)), type="l", lty=3,col='orange',lwd=6)}
else {
print("V2")
lines(rep(mean(x1[which(kmw1$cluster==which(kmw1$centers==max(kmw1$centers)))]), length(x)), type="l", lty=3,col='orange',lwd=6)}
lines(rep(( min(x1[which(kmw1$cluster==which(kmw1$centers==min(kmw1$centers)))])), length(x)), col='dark green', lwd=4)
lines(rep(( max(x1[which(kmw1$cluster==which(kmw1$centers==min(kmw1$centers)))])), length(x)), col='dark green', lwd=4)
lines(rep(( max(x1[which(kmw1$cluster==which(kmw1$centers==max(kmw1$centers)))])), length(x)), col='dark green', lwd=4)
#hist(x, breaks=(length(x)/100))
}
draw.func3 <- function(x){
# par(mfrow=c(1,1))
kmw=kmeans(x,3, iter.max=100)
plot(x, t='l')
kmws=sort(kmw$centers)
lines(rep(( mean(x[which(kmw$cluster==3)])), length(x)), type="l", lty=3,col='yellow',lwd=2)
lines(rep(( mean(x[which(kmw$cluster==1)])), length(x)), type="l", lty=3,col='yellow',lwd=2)
lines(rep(( mean(x[which(kmw$cluster==2)])), length(x)), type="l", lty=3,col='yellow',lwd=2)
lines(rep(( min(x[which(kmw$cluster==which(kmw$centers==kmws[2]))])), length(x)), col='green', lwd=4)
lines(rep(( max(x[which(kmw$cluster==which(kmw$centers==kmws[2]))])), length(x)), col='green', lwd=4)
#lines(rep(( max(x[which(kmw$cluster==which(kmw$centers==kmws[3]))])), length(x)), col='blue', lwd=4)
lines(rep(( mean(x[which(kmw$cluster==which(kmw$centers==kmws[3]))])+sd(x[which(kmw$cluster==which(kmw$centers==kmws[3]))])),
length(x)), col='red', lwd=4)
lines(rep(( mean(x[which(kmw$cluster==which(kmw$centers==kmws[3]))])+3*sd(x[which(kmw$cluster==which(kmw$centers==kmws[3]))])),
length(x)), col='red', lwd=4)
hl=( mean(x[which(kmw$cluster==which(kmw$centers==kmws[3]))])+sd(x[which(kmw$cluster==which(kmw$centers==kmws[3]))]))
ll=max(x[which(kmw$cluster==which(kmw$centers==kmws[2]))])
av=mean(x[which(x>=ll & x<hl)])
print(av)
lines(rep(av, length(x)), type="l", lty=3,col='dark violet',lwd=6)
#hist(x, breaks=(length(x)/100))
}
calc.intervals <- function(x, L){
#par(mfrow=c(2,4))
I=NULL
k=1
while(k<length(x) & (length(x)-k)>L){
# H2=find.hurst2(smooth(x[k:length(x)]), L)
H2=find.hurst(smooth(x[k:length(x)]), L)
#   plot(H2, t='l')
#   lines(smooth(H2), col='blue')
if(max((H2))>0.5){
#  if(max((H2))>0.721){
# print(max(H2))
#k=(which(H2==max(H2))+L+k)
k=(which((H2)>0.5)[1]+k+L)
I=c(I,k)
# print(I)
}
else {
return(I)
}
}
return(I)
}
clustering <- function(x, L){
CI=calc.intervals(x, L)
D=NULL
for(i in 1:(length(CI)+1)){
if (i==1) {
d=x[1:CI[i]]
}
else if(i==(length(CI)+1)) {
d=x[CI[i-1]:length(CI)]
}
else {d=x[CI[i-1]:CI[i]]}
kmw=kmeans(d,4, iter.max=100)
kmws=sort(kmw$centers)
if(i==(length(CI)+1)) ll=length(x)
else ll=CI[i]
t=data.frame(length=ll, lim1=max(d[which(kmw$cluster==which(kmw$centers==kmws[1]))]),
lim2=max(d[which(kmw$cluster==which(kmw$centers==kmws[2]))]),
lim3=max(d[which(kmw$cluster==which(kmw$centers==kmws[3]))]),
lim4=(mean(d[which(kmw$cluster==which(kmw$centers==kmws[4]))])+sd(d[which(kmw$cluster==which(kmw$centers==kmws[4]))])),
limM=(mean(d[which(kmw$cluster==which(kmw$centers==kmws[4]))])+3*sd(d[which(kmw$cluster==which(kmw$centers==kmws[4]))])))
# print(t)
D=rbind(D, t)
}
plot(x, t='l')
lines(y=D$lim2, x=D$length, col='green', lwd=4)
lines(y=D$lim3, x=D$length, col='blue', lwd=4)
lines(y=D$lim4, x=D$length, col='red', lwd=4)
lines(y=D$limM, x=D$length, col='red', lwd=4)
lines(y=D$lim1, x=D$length, t='l', col='green', lwd=4)
return(D)
}
find.hurst <- function(f,L){
H=vector()
for(l in 1:(length(f)-L)){
mt=f[l:(l+L)]
cx=mean(mt)
cd=vector()
for(j in 1:length(mt)){
cd[j]=mt[j]-cx
}
r=max(cd, na.rm=TRUE)-min(cd, na.rm=TRUE)
S=sqrt(var(mt, na.rm=TRUE))
h=log(r/S)
k=log(length(mt)/2)
H[l-1]=h/k
}
return(H)
}
find.hurst2 <- function(f,L){
H=vector()
for(l in 1:(length(f)-L)){
mt=f[l:(l+L)]
cx=mean(mt)
cd=vector()
for(j in 1:length(mt)){
cd[j]=mt[j]-cx
}
R=max(cd, na.rm=TRUE)-min(cd, na.rm=TRUE)
S=sqrt(var(mt, na.rm=TRUE))
r=r.est(mt)
print(r)
kn=((3*length(mt)/2)^(1/3))*((2*r/(1-r^2))^(2/3))
print(kn)
q=trunc(kn)
ind=seq(1, q)
w=1-ind/(q+1)
S= (sum((mt-mean(mt))^2)/length(mt))+(2/length(mt))*(2/length(mt))*sum(w[1:q]*sum((mt[2:(q+1)]-mean(mt))*(mt[1:(q)]-mean(mt))))
h=log(R/S)
V=R/(sqrt(S)*sqrt(length(mt)))
k=log(length(mt)/2)
#H[l-1]=h/k
H[l]=V
}
return(H)
}
r.est <- function(x){
N=length(x)
x1=x[2:length(x)]
x2=x[1:(length(x)-1)]
x11=x1-sum(x1)/(length(x)-1)
x22=x2-sum(x2)/(length(x)-1)
v=sqrt(sum(x11^2)*sum(x22^2))
r=sum(x11*x22)/v
return(r)
}
draw.func(400-as.numeric(D1$V12))
D2=read.csv("alltop1.csv", header=F, sep=',')
head(D2)
draw.func(400-as.numeric(D2$V12))
draw.func <- function(x){
#par(mfrow=c(1,1))
kmw=kmeans(x,4, iter.max=100)
plot(x, t='l')
kmws=sort(kmw$centers)
lines(rep(( mean(x[which(kmw$cluster==3)])), length(x)), type="l", lty=3,col='yellow',lwd=2)
lines(rep(( mean(x[which(kmw$cluster==1)])), length(x)), type="l", lty=3,col='yellow',lwd=2)
lines(rep(( mean(x[which(kmw$cluster==2)])), length(x)), type="l", lty=3,col='yellow',lwd=2)
lines(rep(( mean(x[which(kmw$cluster==4)])), length(x)), type="l", lty=3,col='yellow',lwd=2)
lines(rep(( min(x[which(kmw$cluster==which(kmw$centers==kmws[2]))])), length(x)), col='green', lwd=4)
lines(rep(( max(x[which(kmw$cluster==which(kmw$centers==kmws[2]))])), length(x)), col='green', lwd=4)
lines(rep(( max(x[which(kmw$cluster==which(kmw$centers==kmws[3]))])), length(x)), col='blue', lwd=4)
lines(rep(( mean(x[which(kmw$cluster==which(kmw$centers==kmws[4]))])+sd(x[which(kmw$cluster==which(kmw$centers==kmws[4]))])),
length(x)), col='red', lwd=4)
lines(rep(( mean(x[which(kmw$cluster==which(kmw$centers==kmws[4]))])+3*sd(x[which(kmw$cluster==which(kmw$centers==kmws[4]))])),
length(x)), col='red', lwd=4)
print(paste("H1=",mean(x[which(kmw$cluster==which(kmw$centers==kmws[2]))])))
print(paste("H3=",mean(x[which(kmw$cluster==which(kmw$centers==kmws[4]))])))
hl=( mean(x[which(kmw$cluster==which(kmw$centers==kmws[4]))]))#+sd(x[which(kmw$cluster==which(kmw$centers==kmws[4]))]))
ll=mean(x[which(kmw$cluster==which(kmw$centers==kmws[2]))])
#It necessary to devide into 2 clusters from H1 to H3
x1=x[which(x>mean(x[which(kmw$cluster==which(kmw$centers==kmws[2]))]) & x<mean(x[which(kmw$cluster==which(kmw$centers==kmws[4]))]))]
kmw1=kmeans(x1,2, iter.max=100)
av=mean(x[which(x>=ll & x<hl)])
av1=median(x[which(x>=ll & x<hl)])
print(max(x1[which(kmw1$cluster==1)]))
lines(rep(av, length(x)), type="l", lty=3,col='dark violet',lwd=6)
#lines(rep(av1, length(x)), type="l", lty=3,col='violet',lwd=6)
# print(kurtosis(x1))
# print(skewness(x1))
print(paste("Average", av))
if(kurtosis(x1)>(-0.5) & skewness(x1)<0){print('V1')
lines(rep(max(x1[which(kmw1$cluster==which(kmw1$centers==min(kmw1$centers)))]), length(x)), type="l", lty=3,col='orange',lwd=6)}
else {
print("V2")
lines(rep(mean(x1[which(kmw1$cluster==which(kmw1$centers==max(kmw1$centers)))]), length(x)), type="l", lty=3,col='orange',lwd=6)}
lines(rep(( min(x1[which(kmw1$cluster==which(kmw1$centers==min(kmw1$centers)))])), length(x)), col='dark green', lwd=4)
lines(rep(( max(x1[which(kmw1$cluster==which(kmw1$centers==min(kmw1$centers)))])), length(x)), col='dark green', lwd=4)
lines(rep(( max(x1[which(kmw1$cluster==which(kmw1$centers==max(kmw1$centers)))])), length(x)), col='dark green', lwd=4)
#hist(x, breaks=(length(x)/100))
}
draw.func(400-as.numeric(D2$V12))
draw.func <- function(x){
#par(mfrow=c(1,1))
kmw=kmeans(x,4, iter.max=100)
plot(x, t='l')
kmws=sort(kmw$centers)
lines(rep(( mean(x[which(kmw$cluster==3)])), length(x)), type="l", lty=3,col='yellow',lwd=2)
lines(rep(( mean(x[which(kmw$cluster==1)])), length(x)), type="l", lty=3,col='yellow',lwd=2)
lines(rep(( mean(x[which(kmw$cluster==2)])), length(x)), type="l", lty=3,col='yellow',lwd=2)
lines(rep(( mean(x[which(kmw$cluster==4)])), length(x)), type="l", lty=3,col='yellow',lwd=2)
lines(rep(( min(x[which(kmw$cluster==which(kmw$centers==kmws[2]))])), length(x)), col='green', lwd=4)
lines(rep(( max(x[which(kmw$cluster==which(kmw$centers==kmws[2]))])), length(x)), col='green', lwd=4)
lines(rep(( max(x[which(kmw$cluster==which(kmw$centers==kmws[3]))])), length(x)), col='blue', lwd=4)
lines(rep(( mean(x[which(kmw$cluster==which(kmw$centers==kmws[4]))])+sd(x[which(kmw$cluster==which(kmw$centers==kmws[4]))])),
length(x)), col='red', lwd=4)
lines(rep(( mean(x[which(kmw$cluster==which(kmw$centers==kmws[4]))])+3*sd(x[which(kmw$cluster==which(kmw$centers==kmws[4]))])),
length(x)), col='red', lwd=4)
print(paste("H1=",mean(x[which(kmw$cluster==which(kmw$centers==kmws[2]))])))
print(paste("H3=",mean(x[which(kmw$cluster==which(kmw$centers==kmws[4]))])))
hl=( mean(x[which(kmw$cluster==which(kmw$centers==kmws[4]))]))#+sd(x[which(kmw$cluster==which(kmw$centers==kmws[4]))]))
ll=mean(x[which(kmw$cluster==which(kmw$centers==kmws[2]))])
#It necessary to devide into 2 clusters from H1 to H3
x1=x[which(x>mean(x[which(kmw$cluster==which(kmw$centers==kmws[2]))]) & x<mean(x[which(kmw$cluster==which(kmw$centers==kmws[4]))]))]
kmw1=kmeans(x1,2, iter.max=100)
av=mean(x[which(x>=ll & x<hl)])
av1=median(x[which(x>=ll & x<hl)])
print(max(x1[which(kmw1$cluster==1)]))
lines(rep(av, length(x)), type="l", lty=3,col='dark violet',lwd=6)
#lines(rep(av1, length(x)), type="l", lty=3,col='violet',lwd=6)
# print(kurtosis(x1))
# print(skewness(x1))
print(paste("Average", av))
#   if(kurtosis(x1)>(-0.5) & skewness(x1)<0){print('V1')
# lines(rep(max(x1[which(kmw1$cluster==which(kmw1$centers==min(kmw1$centers)))]), length(x)), type="l", lty=3,col='orange',lwd=6)}
# else {
#   print("V2")
#   lines(rep(mean(x1[which(kmw1$cluster==which(kmw1$centers==max(kmw1$centers)))]), length(x)), type="l", lty=3,col='orange',lwd=6)}
# lines(rep(( min(x1[which(kmw1$cluster==which(kmw1$centers==min(kmw1$centers)))])), length(x)), col='dark green', lwd=4)
# lines(rep(( max(x1[which(kmw1$cluster==which(kmw1$centers==min(kmw1$centers)))])), length(x)), col='dark green', lwd=4)
# lines(rep(( max(x1[which(kmw1$cluster==which(kmw1$centers==max(kmw1$centers)))])), length(x)), col='dark green', lwd=4)
# #hist(x, breaks=(length(x)/100))
}
draw.func(400-as.numeric(D2$V12))
head(D2)
D2$V12=gsub("%","", D2$V12)
draw.func(400-as.numeric(D2$V12))
draw.func(400-as.numeric(D1$V12))
draw.func(400-as.numeric(D2$V12))
setwd("/Users/annachistyakova/Documents/routing")
setwd("/Users/annachistyakova/Documents/routing/rout_as")
am=read.csv("Automatic Bulk AM.csv", header=T, sep=',')
head(am)
hist(am$Travel.time.ratio)
length(am$Travel.time.ratio[which(am$Travel.time.ratio>0.5)])
length(am$Travel.time.ratio)
88/771
100*88/771
hist(am$Overtime.1)
length(am$Overtime.1[which(am$Overtime.1>0.2)])
length(am$Overtime.1[which(am$Overtime.1>0.1)])
100*80/771
colnames(am)
hist(am$Losses..)
length(am$Losses..[which(am$Losses..>99)])
length(am$Losses..[which(am$Losses..>80)])
length(am$Losses..[which(am$Losses..>50)])
100*74/771
shiny::runApp('Documents/routing/rout_as')
shiny::runApp('Documents/routing')
setwd("/Users/annachistyakova/Documents/routing")
shiny::runApp('Documents/routing/rout_as')
shiny::runApp('rout_as')
mn=read.csv("Repair jobs - same day.csv", header=T, sep=',')
getwd()
setwd("/Users/annachistyakova/Documents/routing/rout_as")
mn=read.csv("Repair jobs - same day.csv", header=T, sep=',')
head(mn)
length(mn$Travel.time.ratio[which(am$Travel.time.ratio>0.5)])
length(mn$Travel.time.ratio[which(mn$Travel.time.ratio>0.5)])
length(mn$Overtime.1[which(mn$Overtime.1>0.1)])
length(mn$Losses..[which(mn$Losses..>50)])
nrow(mn)
100*35/2308
100*1678/2308
100*273/2308
